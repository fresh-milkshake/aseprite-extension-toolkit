name: Build Release

permissions:
  contents: write

on:
  push:
    branches:
      - main
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            platform: windows
            executable_ext: .exe
          - os: ubuntu-latest
            platform: linux
            executable_ext: ""
          - os: macos-latest
            platform: macos
            executable_ext: ""

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install click watchdog

    - name: Build executable
      run: |
        python build.py

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: aseprite-extension-toolkit-${{ matrix.platform }}
        path: dist/*

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set version
      id: version
      run: echo "VERSION=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT

    - name: Delete existing tag if it exists
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check if tag exists on remote and delete it
        if git ls-remote --tags origin | grep -q "refs/tags/${{ steps.version.outputs.VERSION }}$"; then
          echo "Tag ${{ steps.version.outputs.VERSION }} exists on remote, deleting..."
          git push origin :refs/tags/${{ steps.version.outputs.VERSION }} || true
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create tag
      run: |
        git tag ${{ steps.version.outputs.VERSION }}
        git push origin ${{ steps.version.outputs.VERSION }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Delete existing release if it exists
      run: |
        gh release delete ${{ steps.version.outputs.VERSION }} --yes || true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        release_name: Release ${{ steps.version.outputs.VERSION }}
        draft: false
        prerelease: false
        body: |
          ## Aseprite Extension Toolkit ${{ steps.version.outputs.VERSION }}
          
          ### Downloads
          Choose the appropriate version for your operating system:
          
          - **Windows**: `aseprite-extension-toolkit-windows.exe`
          - **Linux**: `aseprite-extension-toolkit-linux`
          - **macOS**: `aseprite-extension-toolkit-macos`
          
          ### Installation
          1. Download the appropriate executable for your system
          2. Run the executable directly (no installation required)
          3. Use `--help` to see available commands

    - name: Upload Release Assets
      run: |
        for artifact_dir in aseprite-extension-toolkit-*; do
          for file in "$artifact_dir"/*; do
            if [ -f "$file" ]; then
              echo "Uploading $file"
              gh release upload ${{ steps.version.outputs.VERSION }} "$file" --clobber
            fi
          done
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}